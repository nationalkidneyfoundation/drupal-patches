diff --git a/includes/redhen_donation.forms.inc b/includes/redhen_donation.forms.inc
index 2ef831a..ab3131d 100644
--- a/includes/redhen_donation.forms.inc
+++ b/includes/redhen_donation.forms.inc
@@ -980,6 +980,8 @@ function redhen_donation_form_submit($form, &$form_state) {
 
     // Now we can process the payment at last.
     $payment_method = commerce_payment_method_instance_load($form_state['values']['payment_method']);
+    // Try to get a redirect payment callback for offsite methods.
+    $callback_redirect = commerce_payment_method_callback($payment_method, 'redirect_form');
     // Delegate submit to the payment method callback.
     if ($callback = commerce_payment_method_callback($payment_method, 'submit_form_submit')) {
       $charge = array(
@@ -1001,17 +1003,24 @@ function redhen_donation_form_submit($form, &$form_state) {
       commerce_line_item_save($line_item);
 
       $callback($payment_method, $details_form, $details_values, $order, $charge);
-      $transaction = entity_load('commerce_payment_transaction', FALSE, array('order_id' => $order->order_id));
-      $transaction = current($transaction);
-      if ($transaction->status != 'success') {
-        commerce_order_status_update($order, 'canceled', FALSE, TRUE, t('Payment declined: @message'), array('@message' => $transaction->message));
-        drupal_set_message(t('There was a problem with your payment: @message', array('@message' => $transaction->message)), 'error');
-        // This preserves the form state if a user wants to resubmit.
-        $form_state['redirect'] = FALSE;
-        return FALSE;
+      // Only test transaction if we don't have an offise payment method.
+      if (!$callback_redirect) {
+        $transaction = entity_load('commerce_payment_transaction', FALSE, array('order_id' => $order->order_id));
+        $transaction = current($transaction);
+        if ($transaction->status != 'success') {
+          commerce_order_status_update($order, 'canceled', FALSE, TRUE, t('Payment declined: @message'), array('@message' => $transaction->message));
+          drupal_set_message(t('There was a problem with your payment: @message', array('@message' => $transaction->message)), 'error');
+          // This preserves the form state if a user wants to resubmit.
+          $form_state['redirect'] = FALSE;
+          return FALSE;
+        }
+        else {
+          commerce_order_status_update($order, 'completed', FALSE, TRUE, t('Payment accepted successful.'));
+        }
       }
       else {
-        commerce_order_status_update($order, 'completed', FALSE, TRUE, t('Payment accepted successful.'));
+        // Mark order as pending, awaiting result of offsite payment.
+        commerce_order_status_update($order, 'pending', FALSE, TRUE, t('Pending offsite payment.'));
       }
     }
   }
@@ -1041,30 +1050,46 @@ function redhen_donation_form_submit($form, &$form_state) {
 
   // Save the donation and redirect.
   if (redhen_donation_save($donation)) {
-    watchdog('redhen_donation', 'RedHen Donation %donation_id has been saved.',
-      array('%donation_id' => $donation->donation_id),
-      WATCHDOG_NOTICE
-    );
-    if (!empty($settings['settings']['confirmation_message'])) {
-      if (module_exists('token')) {
-        $message = token_replace($settings['settings']['confirmation_message'], array(
-          'redhen_donation' => $donation,
-          'redhen_contact' => $contact,
-        ));
+    // For offsite payment methods defer redirection and rules invocation.
+    if($callback_redirect) {
+      // Store donation data on order for reference later.
+      $order->data['redhen_donation'] = array(
+        'bundle' => $donation->bundle(),
+        'donation_id' => $donation->donation_id,
+        'line_item_id' => $line_item->line_item_id,
+        'product_id' => $product->product_id,
+        'payment_method' => $form_state['values']['payment_method']
+      );
+      commerce_order_save($order);
+      // Hand over payment processing to offsite method.
+      $callback_redirect($form, $form_state, $order, $payment_method);
+    }
+    else {
+      watchdog('redhen_donation', 'RedHen Donation %donation_id has been saved.',
+        array('%donation_id' => $donation->donation_id),
+        WATCHDOG_NOTICE
+      );
+      if (!empty($settings['settings']['confirmation_message'])) {
+        if (module_exists('token')) {
+          $message = token_replace($settings['settings']['confirmation_message'], array(
+            'redhen_donation' => $donation,
+            'redhen_contact' => $contact,
+          ));
+        }
+        else {
+          $message = $settings['settings']['confirmation_message'];
+        }
+        drupal_set_message($message);
       }
-      else {
-        $message = $settings['settings']['confirmation_message'];
+      if (!isset($form_state['redirect'])) {
+        if (!empty($settings['settings']['confirmation_page'])) {
+          $form_state['redirect'] = array($settings['settings']['confirmation_page']);
+        }
       }
-      drupal_set_message($message);
-    }
-    if (!isset($form_state['redirect'])) {
-      if (!empty($settings['settings']['confirmation_page'])) {
-        $form_state['redirect'] = array($settings['settings']['confirmation_page']);
+      if (!$form_state['use_cart']) {
+        rules_invoke_event('redhen_donation_donation_completed', $donation, $transaction, $line_item, $product);
       }
     }
-    if (!$form_state['use_cart']) {
-      rules_invoke_event('redhen_donation_donation_completed', $donation, $transaction, $line_item, $product);
-    }
   }
   else {
     drupal_set_message(t('There was a problem submitting your donation.'));
diff --git a/redhen_donation.module b/redhen_donation.module
index f615f87..1f5952c 100644
--- a/redhen_donation.module
+++ b/redhen_donation.module
@@ -295,6 +295,107 @@ function redhen_donation_menu() {
 }
 
 /**
+ * Implements hook_menu_alter().
+ */
+ function redhen_donation_menu_alter(&$items) {
+   // Reroute commerce callbacks to handle offsite payment methods.
+   $items['checkout/%commerce_order/%commerce_checkout_page']['page callback'] = 'redhen_donation_checkout_router';
+   $items['checkout/%commerce_order/%commerce_checkout_page']['access callback'] = 'redhen_donation_checkout_access';
+   $items['checkout/%commerce_order/%commerce_checkout_page']['access arguments'] = array(1, 2);
+ }
+
+function redhen_donation_checkout_access($order, $checkout_page = NULL) {
+  if (!$order->data['redhen_donation']) {
+    return user_access('access checkout');
+  } else {
+    $donation_data = $order->data['redhen_donation'];
+    $donation = redhen_donation_load($donation_data['donation_id']);
+    $settings = redhen_donation_entity_settings(
+      $donation->entity_type,
+      $donation->entity_id,
+      TRUE
+    );
+    $host_entity = entity_load_single($settings['entity_type'], $settings['entity_id']);
+    return redhen_donation_donate_page_access($donation->entity_type, $host_entity);
+  }
+}
+
+function redhen_donation_checkout_router($order, $checkout_page = NULL) {
+  module_load_include('inc', 'commerce_checkout', 'includes/commerce_checkout.pages');
+  if (!$order->data['redhen_donation']) {
+    // Defer to commerce if we are not dealing with a Redhen Donation.
+    return commerce_checkout_router($order, $checkout_page);
+  } else {
+    $donation_data = $order->data['redhen_donation'];
+    $donation = redhen_donation_load($donation_data['donation_id']);
+    $line_item = commerce_line_item_load($donation_data['line_item_id']);
+    $product = commerce_product_load($donation_data['product_id']);
+
+    $settings = redhen_donation_entity_settings(
+        $donation->entity_type,
+        $donation->entity_id,
+        TRUE
+      );
+
+    $payment_method = commerce_payment_method_instance_load($donation_data['payment_method']);
+
+    $validate_callback = commerce_payment_method_callback($payment_method, 'redirect_form_validate');
+
+    $success = FALSE;
+    // If there is no validate handler or if there is and it isn't FALSE...
+    if (!$validate_callback || $validate_callback($order, $payment_method) !== FALSE) {
+      // Perform any submit functions if necessary.
+      if ($callback = commerce_payment_method_callback($payment_method, 'redirect_form_submit')) {
+        $callback($order, $payment_method);
+      }
+
+      $transaction = entity_load('commerce_payment_transaction', FALSE, array('order_id' => $order->order_id));
+      $transaction = current($transaction);
+
+      $success = ($transaction->status == 'success');
+    }
+    if ($success) {
+      commerce_order_status_update($order, 'completed', FALSE, TRUE, t('Payment accepted successful.'));
+      $goto = '<front>';
+      // Figure out where to send donor.
+      if (!empty($settings['settings']['confirmation_message'])) {
+        if (module_exists('token')) {
+          $message = token_replace($settings['settings']['confirmation_message'], array(
+            'redhen_donation' => $donation,
+            'redhen_contact' => $contact,
+          ));
+        }
+        else {
+          $message = $settings['settings']['confirmation_message'];
+        }
+        drupal_set_message($message);
+      }
+      if (!empty($settings['settings']['confirmation_page'])) {
+        $goto = $settings['settings']['confirmation_page'];
+      }
+      else {
+        $host_entity = entity_metadata_wrapper($settings['entity_type'], $settings['entity_id']);
+        $goto = $host_entity->url->value();
+      }
+      // Don't need to invoke this rule as paid in full hook takes care of this.
+      //rules_invoke_event('redhen_donation_donation_completed', $donation, $transaction, $line_item, $product);
+      drupal_goto($goto);
+    }
+    else {
+      // Otherwise display the failure message and send the customer back.
+      drupal_set_message(t('Payment failed at the payment server. Please review your information and try again.'), 'error');
+      $host_entity = entity_metadata_wrapper($settings['entity_type'], $settings['entity_id']);
+      $message = ($transaction) ? $transaction->message : t('Order cancelled by customer.');
+      commerce_order_status_update($order, 'canceled', FALSE, TRUE, t('Payment declined: @message'), array('@message' => $message));
+      // If an onsite transaction fails no donation is created, so we delete the Donation
+      // to maintain the same result for offsite transactions.
+      redhen_donation_delete_multiple(array($donation_data['donation_id']));
+      drupal_goto($host_entity->url->value());
+    }
+  }
+}
+
+/**
  * Implements hook_admin_paths().
  */
 function redhen_donation_admin_paths() {
