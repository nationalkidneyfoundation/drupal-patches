diff --git a/modules/commerce_iats_cardonfile/commerce_iats_cardonfile.module b/modules/commerce_iats_cardonfile/commerce_iats_cardonfile.module
index 637ba03..289c1cf 100644
--- a/modules/commerce_iats_cardonfile/commerce_iats_cardonfile.module
+++ b/modules/commerce_iats_cardonfile/commerce_iats_cardonfile.module
@@ -878,3 +878,375 @@ function commerce_iats_cardonfile_credit_card_charge_callback($payment_method, $
   // Result will be an array on success and FALSE on failure. Convert to bool.
   return ($result !== FALSE);
 }
+
+/**
+ * Creates a new card on file record for credit card payment methods.
+ */
+function commerce_iats_cardonfile_credit_card_create($form, $form_state, $payment_method, $card) {
+  // Get the API service.
+  $iats = commerce_iats_get_service('CustomerLink', $payment_method);
+
+  $request = array(
+    'customerIPAddress' => ip_address(),
+    'mop' => $card->card_type,
+    'creditCardNum' => $form_state['values']['credit_card']['number'],
+    'creditCardExpiry' => $expiry = sprintf('%02d/%02d', $card->card_exp_month, $card->card_exp_year % 100),
+    'cvv2' => $form_state['values']['credit_card']['code'],
+    'currency' => 'USD',
+    'recurring' => 0,
+    'beginDate' => commerce_iats_get_formatted_date(time()),
+    'endDate' => commerce_iats_get_formatted_date(time()),
+  );
+
+  // Create the credit card remote ID (customer code) with iATS.
+  $response = $iats->createCreditCardCustomerCode($request);
+
+  if (($response !== FALSE) && !empty($response['CUSTOMERCODE'])) {
+    // Save the card on file record with new remote ID.
+    $card->remote_id = trim($response['CUSTOMERCODE']);
+
+    if (commerce_cardonfile_save($card) === FALSE) {
+      drupal_set_message(t('Your card details could not be stored.'), 'error');
+    }
+  }
+  else {
+    $card = FALSE;
+  }
+
+  return $card;
+}
+
+/**
+ * Payment method callback: card update form.
+ *
+ * Updates credit card details stored with iATS Payments.
+ */
+function commerce_iats_cardonfile_credit_card_update($form, &$form_state, $payment_method, $card_data) {
+  $card = array(
+    'number' => '',
+    'exp_month' => $card_data->card_exp_month,
+    'exp_year' => $card_data->card_exp_year,
+  );
+
+  $formatted_card_data = commerce_iats_format_credit_card_data($card);
+
+  $name_parts = explode(' ', $card_data->card_name);
+  $first_name = array_shift($name_parts);
+  $last_name = implode(' ', $name_parts);
+
+  // Create and populate the API request.
+  $request = array(
+    'customerIPAddress' => ip_address(),
+    'customerCode' => $card_data->remote_id,
+    'firstName' => $first_name,
+    'lastName' => $last_name,
+    'creditCardExpiry' => $formatted_card_data['expiry'],
+    'mop' => commerce_iats_credit_card_mop($card_data->card_type),
+    'updateCreditCardNum' => 0,
+    'comment' => COMMERCE_IATS_COMMENT_PREFIX,
+  );
+
+  if (isset($form_state['values']['credit_card']['recurring'])
+    && !empty($form_state['values']['credit_card']['recurring']['schedule_type'])) {
+    // Updating a recurring payment.
+    // Get default recurring payment duration.
+    $payment_duration = variable_get('commerce_iats_recurring_payment_duration',
+      COMMERCE_IATS_RECURRING_PAYMENT_DURATION);
+    $end_time = mktime(0, 0, 0, date('n'), date('j') + $payment_duration, date('y'));
+
+    $request['recurring'] = 1;
+    $request['beginDate'] = commerce_iats_get_formatted_date(time());
+    $request['endDate'] = commerce_iats_get_formatted_date($end_time);
+    $request['amount'] = $form_state['values']['credit_card']['recurring']['amount'];
+    $request['scheduleType'] = $form_state['values']['credit_card']['recurring']['schedule_type'];
+    $request['scheduleDate'] = $form_state['values']['credit_card']['recurring']['schedule_date'];
+  }
+  else {
+    // Not a recurring payment or cancelling an existing recurring payment.
+    $request['recurring'] = 0;
+    $request['beginDate'] = commerce_iats_get_formatted_date(time());
+    $request['endDate'] = commerce_iats_get_formatted_date(time());
+    $request['amount'] = 0;
+    $request['scheduleType'] = '';
+    $request['scheduleDate'] = '';
+  }
+
+  // Get the API service.
+  $iats = commerce_iats_get_service('CustomerLink', $payment_method);
+
+  // Log the request.
+  if ($payment_method['settings']['log']['request'] === 'request') {
+    commerce_iats_log_request($payment_method,
+      'commerce_iats_cardonfile_credit_card_update', $request);
+  }
+
+  // Process the credit card update.
+  $response = $iats->updateCreditCardCustomerCode($request);
+
+  $auth_result = (isset($response['AUTHORIZATIONRESULT'])) ?
+    trim($response['AUTHORIZATIONRESULT']) : NULL;
+
+  if ($auth_result == NULL) {
+    $auth_result = $response;
+  }
+
+  if (substr($auth_result, 0, 2) != COMMERCE_IATS_TXN_OK) {
+    watchdog('commerce_iats_cardonfile',
+      'iATS error when updating customer code: @error',
+      array(
+        '@error' => $auth_result,
+      )
+    );
+    return FALSE;
+  }
+
+  // Update the recurring payment record.
+  $card_on_file_recurring = commerce_iats_cardonfile_recurring_load($card_data->card_id);
+
+  if (!empty($card_on_file_recurring)) {
+    $card_on_file_recurring->amount = $request['amount'];
+    $card_on_file_recurring->schedule_type = $request['scheduleType'];
+    $card_on_file_recurring->schedule_date = $request['scheduleDate'];
+    commerce_iats_cardonfile_recurring_save($card_on_file_recurring);
+  }
+
+  return TRUE;
+}
+
+/**
+ * Payment method callback: card delete form.
+ *
+ * Deletes customer code and associated credit card details
+ * stored with iATS Payments.
+ * Will not delete customer codes that have been used in a payment transaction.
+ */
+function commerce_iats_cardonfile_credit_card_delete($form, &$form_state, $payment_method, $card_data) {
+  // Create and populate the API request.
+  $request = array(
+    'customerIPAddress' => ip_address(),
+    'customerCode' => $card_data->remote_id,
+    'comment' => COMMERCE_IATS_COMMENT_PREFIX,
+  );
+
+  // Get the API service.
+  $iats = commerce_iats_get_service('CustomerLink', $payment_method);
+
+  // Log the request.
+  if ($payment_method['settings']['log']['request'] === 'request') {
+    commerce_iats_log_request($payment_method,
+      'commerce_iats_cardonfile_credit_card_delete', $request);
+  }
+
+  // Process the credit card deletion.
+  $response = $iats->deleteCustomerCode($request);
+
+  $auth_result = (isset($response['AUTHORIZATIONRESULT'])) ?
+    trim($response['AUTHORIZATIONRESULT']) : NULL;
+
+  if ($auth_result == NULL) {
+    $auth_result = $response;
+  }
+
+  if ((substr($auth_result, 0, 2) == COMMERCE_IATS_TXN_OK) || strstr($auth_result, 'THE CUSTOMER CODE HAS BEEN USED')) {
+    return TRUE;
+  }
+  else {
+    watchdog('commerce_iats_cardonfile',
+      'iATS error when deleting customer code: @error',
+      array(
+        '@error' => $auth_result,
+      )
+    );
+
+    drupal_set_message(
+      t('We were unable to remove your card at this time.'),
+      'error');
+  }
+
+  return FALSE;
+}
+
+/**
+ * Creates a new card on file record for ACH/EFT payment methods.
+ */
+function commerce_iats_cardonfile_ach_eft_create($form, $form_state, $payment_method, $card) {
+  module_load_include('inc', 'commerce_iats', 'includes/commerce_iats.ach_eft');
+
+  // Get the API service.
+  $iats = commerce_iats_get_service('CustomerLink', $payment_method);
+
+  $account_num = commerce_iats_ach_eft_currency_specific_account_number($form_state['values']['bank_account'], $form_state['values']['currency']);
+
+  $request = array(
+    'customerIPAddress' => ip_address(),
+    'accountNum' => $account_num,
+    'accountType' => strtoupper($form_state['values']['bank_account']['type']),
+    'recurring' => 0,
+    'beginDate' => commerce_iats_get_formatted_date(time()),
+    'endDate' => commerce_iats_get_formatted_date(time()),
+  );
+
+  // Create the ACH/EFT remote ID (customer code) with iATS.
+  $response = $iats->createACHEFTCustomerCode($request);
+
+  if (($response !== FALSE) && !empty($response['CUSTOMERCODE'])) {
+    // Save the card on file record with new remote ID.
+    $card->remote_id = trim($response['CUSTOMERCODE']);
+
+    // Create an expiration data.
+    $expiration = commerce_iats_cardonfile_ach_eft_get_expiration();
+    $card->card_exp_year = $expiration['exp_year'];
+    $card->card_exp_month = $expiration['exp_month'];
+
+    if (commerce_cardonfile_save($card) === FALSE) {
+      drupal_set_message(t('Your card details could not be stored.'), 'error');
+    }
+  }
+  else {
+    $card = FALSE;
+  }
+
+  return $card;
+}
+
+/**
+ * Payment method callback: card update form.
+ *
+ * Updates bank account details stored with iATS Payments.
+ */
+function commerce_iats_cardonfile_ach_eft_update($form, &$form_state, $payment_method, $card_data) {
+  $name_parts = explode(' ', $card_data->card_name);
+  $first_name = array_shift($name_parts);
+  $last_name = implode(' ', $name_parts);
+
+  // Create and populate the API request.
+  $request = array(
+    'customerIPAddress' => ip_address(),
+    'customerCode' => $card_data->remote_id,
+    'firstName' => $first_name,
+    'lastName' => $last_name,
+    'accountCustomerName' => $card_data->card_name,
+    'accountType' => strtoupper($card_data->card_type),
+    'updateAccountNum' => 0,
+    'comment' => COMMERCE_IATS_COMMENT_PREFIX,
+  );
+
+  if (isset($form_state['values']['credit_card']['recurring'])
+    && !empty($form_state['values']['credit_card']['recurring']['schedule_type'])) {
+    // Updating a recurring payment.
+    // Get default recurring payment duration.
+    $payment_duration = variable_get('commerce_iats_recurring_payment_duration',
+      COMMERCE_IATS_RECURRING_PAYMENT_DURATION);
+    $end_time = mktime(0, 0, 0, date('n'), date('j') + $payment_duration, date('y'));
+
+    $request['recurring'] = 1;
+    $request['beginDate'] = commerce_iats_get_formatted_date(time());
+    $request['endDate'] = commerce_iats_get_formatted_date($end_time);
+    $request['amount'] = $form_state['values']['credit_card']['recurring']['amount'];
+    $request['scheduleType'] = $form_state['values']['credit_card']['recurring']['schedule_type'];
+    $request['scheduleDate'] = $form_state['values']['credit_card']['recurring']['schedule_date'];
+  }
+  else {
+    // Not a recurring payment or cancelling an existing recurring payment.
+    $request['recurring'] = 0;
+    $request['beginDate'] = commerce_iats_get_formatted_date(time());
+    $request['endDate'] = commerce_iats_get_formatted_date(time());
+    $request['amount'] = 0;
+    $request['scheduleType'] = '';
+    $request['scheduleDate'] = '';
+  }
+
+  // Get the API service.
+  $iats = commerce_iats_get_service('CustomerLink', $payment_method);
+
+  // Log the request.
+  if ($payment_method['settings']['log']['request'] === 'request') {
+    commerce_iats_log_request($payment_method,
+      'commerce_iats_cardonfile_ach_eft_update', $request);
+  }
+
+  // Process the ACH/EFT update.
+  $response = $iats->updateACHEFTCustomerCode($request);
+
+  $auth_result = (isset($response['AUTHORIZATIONRESULT'])) ?
+    trim($response['AUTHORIZATIONRESULT']) : NULL;
+
+  if ($auth_result == NULL) {
+    $auth_result = $response;
+  }
+
+  if (substr($auth_result, 0, 2) != COMMERCE_IATS_TXN_OK) {
+    watchdog('commerce_iats_cardonfile',
+      'iATS error when deleting customer code: @error',
+      array(
+        '@error' => $auth_result,
+      )
+    );
+    return FALSE;
+  }
+
+  // Update the recurring payment record.
+  $card_on_file_recurring = commerce_iats_cardonfile_recurring_load($card_data->card_id);
+
+  if (!empty($card_on_file_recurring)) {
+    $card_on_file_recurring->amount = $request['amount'];
+    $card_on_file_recurring->schedule_type = $request['scheduleType'];
+    $card_on_file_recurring->schedule_date = $request['scheduleDate'];
+    commerce_iats_cardonfile_recurring_save($card_on_file_recurring);
+  }
+
+  return TRUE;
+}
+
+/**
+ * Payment method callback: card delete form.
+ *
+ * Deletes customer code and associated bank account details
+ * stored with iATS Payments.
+ * Will not delete customer codes that have been used in a payment transaction.
+ */
+function commerce_iats_cardonfile_ach_eft_delete($form, &$form_state, $payment_method, $card_data) {
+  // Create and populate the API request.
+  $request = array(
+    'customerIPAddress' => ip_address(),
+    'customerCode' => $card_data->remote_id,
+    'comment' => COMMERCE_IATS_COMMENT_PREFIX,
+  );
+
+  // Get the API service.
+  $iats = commerce_iats_get_service('CustomerLink', $payment_method);
+
+  // Log the request.
+  if ($payment_method['settings']['log']['request'] === 'request') {
+    commerce_iats_log_request($payment_method,
+      'commerce_iats_cardonfile_ach_eft_delete', $request);
+  }
+
+  // Process the customer code deletion.
+  $response = $iats->deleteCustomerCode($request);
+
+  $auth_result = (isset($response['AUTHORIZATIONRESULT'])) ?
+    trim($response['AUTHORIZATIONRESULT']) : NULL;
+
+  if ($auth_result == NULL) {
+    $auth_result = $response;
+  }
+
+  if ((substr($auth_result, 0, 2) == COMMERCE_IATS_TXN_OK) || strstr($auth_result, 'THE CUSTOMER CODE HAS BEEN USED')) {
+    return TRUE;
+  }
+  else {
+    watchdog('commerce_iats_cardonfile',
+      'iATS error when deleting customer code: @error',
+      array(
+        '@error' => $auth_result,
+      )
+    );
+
+    drupal_set_message(
+      t('We were unable to remove your account details at this time.'),
+      'error');
+  }
+
+  return FALSE;
+}
diff --git a/modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.ach_eft.inc b/modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.ach_eft.inc
index 0b740bb..b472c88 100644
--- a/modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.ach_eft.inc
+++ b/modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.ach_eft.inc
@@ -215,51 +215,6 @@ function commerce_iats_cardonfile_ach_eft_charge($payment_method, $card_data, $o
   return $response;
 }
 
-/**
- * Creates a new card on file record.
- */
-function commerce_iats_cardonfile_ach_eft_create($form, $form_state, $payment_method, $card) {
-  module_load_include('inc', 'commerce_iats', 'includes/commerce_iats.ach_eft');
-
-  // Get the API service.
-  $iats = commerce_iats_get_service('CustomerLink', $payment_method);
-
-  $account_num = commerce_iats_ach_eft_currency_specific_account_number($form_state['values']['bank_account'], $form_state['values']['currency']);
-
-  $request = array(
-    'customerIPAddress' => ip_address(),
-    'accountNum' => $account_num,
-    'accountType' => strtoupper($form_state['values']['bank_account']['type']),
-    'recurring' => 0,
-    'beginDate' => commerce_iats_get_formatted_date(time()),
-    'endDate' => commerce_iats_get_formatted_date(time()),
-  );
-
-  // Create the ACH/EFT remote ID (customer code) with iATS.
-  $response = $iats->createACHEFTCustomerCode($request);
-
-  if ($response === FALSE || empty($response['CUSTOMERCODE'])) {
-    drupal_set_message(t('Failed at the payment processor with message: !message.', array(
-      '!message' => $response['AUTHORIZATIONRESULT']
-    )), 'error');
-  }
-  else {
-    // Save the card on file record with new remote ID.
-    $card->remote_id = trim($response['CUSTOMERCODE']);
-
-    // Create an expiration data.
-    $expiration = commerce_iats_cardonfile_ach_eft_get_expiration();
-    $card->card_exp_year = $expiration['exp_year'];
-    $card->card_exp_month = $expiration['exp_month'];
-
-    if (commerce_cardonfile_save($card) === FALSE) {
-      drupal_set_message(t('Your card details could not be stored.'), 'error');
-    }
-  }
-
-  return $card;
-}
-
 /**
  * Processes an ACH/EFT charge and creates a card on file record.
  *
@@ -334,148 +289,6 @@ function commerce_iats_cardonfile_ach_eft_create_and_charge($payment_method, $pa
   return $response;
 }
 
-/**
- * Payment method callback: card update form.
- *
- * Updates bank account details stored with iATS Payments.
- */
-function commerce_iats_cardonfile_ach_eft_update($form, &$form_state, $payment_method, $card_data) {
-  $name_parts = explode(' ', $card_data->card_name);
-  $first_name = array_shift($name_parts);
-  $last_name = implode(' ', $name_parts);
-
-  // Create and populate the API request.
-  $request = array(
-    'customerIPAddress' => ip_address(),
-    'customerCode' => $card_data->remote_id,
-    'firstName' => $first_name,
-    'lastName' => $last_name,
-    'accountCustomerName' => $card_data->card_name,
-    'accountType' => strtoupper($card_data->card_type),
-    'updateAccountNum' => 0,
-    'comment' => COMMERCE_IATS_COMMENT_PREFIX,
-  );
-
-  if (isset($form_state['values']['credit_card']['recurring'])
-    && !empty($form_state['values']['credit_card']['recurring']['schedule_type'])) {
-    // Updating a recurring payment.
-    // Get default recurring payment duration.
-    $payment_duration = variable_get('commerce_iats_recurring_payment_duration',
-      COMMERCE_IATS_RECURRING_PAYMENT_DURATION);
-    $end_time = mktime(0, 0, 0, date('n'), date('j') + $payment_duration, date('y'));
-
-    $request['recurring'] = 1;
-    $request['beginDate'] = commerce_iats_get_formatted_date(time());
-    $request['endDate'] = commerce_iats_get_formatted_date($end_time);
-    $request['amount'] = $form_state['values']['credit_card']['recurring']['amount'];
-    $request['scheduleType'] = $form_state['values']['credit_card']['recurring']['schedule_type'];
-    $request['scheduleDate'] = $form_state['values']['credit_card']['recurring']['schedule_date'];
-  }
-  else {
-    // Not a recurring payment or cancelling an existing recurring payment.
-    $request['recurring'] = 0;
-    $request['beginDate'] = commerce_iats_get_formatted_date(time());
-    $request['endDate'] = commerce_iats_get_formatted_date(time());
-    $request['amount'] = 0;
-    $request['scheduleType'] = '';
-    $request['scheduleDate'] = '';
-  }
-
-  // Get the API service.
-  $iats = commerce_iats_get_service('CustomerLink', $payment_method);
-
-  // Log the request.
-  if ($payment_method['settings']['log']['request'] === 'request') {
-    commerce_iats_log_request($payment_method,
-      'commerce_iats_cardonfile_ach_eft_update', $request);
-  }
-
-  // Process the ACH/EFT update.
-  $response = $iats->updateACHEFTCustomerCode($request);
-
-  $auth_result = (isset($response['AUTHORIZATIONRESULT'])) ?
-    trim($response['AUTHORIZATIONRESULT']) : NULL;
-
-  if ($auth_result == NULL) {
-    $auth_result = $response;
-  }
-
-  if (substr($auth_result, 0, 2) != COMMERCE_IATS_TXN_OK) {
-    watchdog('commerce_iats_cardonfile',
-      'iATS error when deleting customer code: @error',
-      array(
-        '@error' => $auth_result,
-      )
-    );
-    return FALSE;
-  }
-
-  // Update the recurring payment record.
-  $card_on_file_recurring = commerce_iats_cardonfile_recurring_load($card_data->card_id);
-
-  if (!empty($card_on_file_recurring)) {
-    $card_on_file_recurring->amount = $request['amount'];
-    $card_on_file_recurring->schedule_type = $request['scheduleType'];
-    $card_on_file_recurring->schedule_date = $request['scheduleDate'];
-    commerce_iats_cardonfile_recurring_save($card_on_file_recurring);
-  }
-
-  return TRUE;
-}
-
-/**
- * Payment method callback: card delete form.
- *
- * Deletes customer code and associated bank account details
- * stored with iATS Payments.
- * Will not delete customer codes that have been used in a payment transaction.
- */
-function commerce_iats_cardonfile_ach_eft_delete($form, &$form_state, $payment_method, $card_data) {
-  // Create and populate the API request.
-  $request = array(
-    'customerIPAddress' => ip_address(),
-    'customerCode' => $card_data->remote_id,
-    'comment' => COMMERCE_IATS_COMMENT_PREFIX,
-  );
-
-  // Get the API service.
-  $iats = commerce_iats_get_service('CustomerLink', $payment_method);
-
-  // Log the request.
-  if ($payment_method['settings']['log']['request'] === 'request') {
-    commerce_iats_log_request($payment_method,
-      'commerce_iats_cardonfile_ach_eft_delete', $request);
-  }
-
-  // Process the customer code deletion.
-  $response = $iats->deleteCustomerCode($request);
-
-  $auth_result = (isset($response['AUTHORIZATIONRESULT'])) ?
-    trim($response['AUTHORIZATIONRESULT']) : NULL;
-
-  if ($auth_result == NULL) {
-    $auth_result = $response;
-  }
-
-  if ((substr($auth_result, 0, 2) == COMMERCE_IATS_TXN_OK) || strstr($auth_result, 'THE CUSTOMER CODE HAS BEEN USED')) {
-    return TRUE;
-  }
-  else {
-    watchdog('commerce_iats_cardonfile',
-      'iATS error when deleting customer code: @error',
-      array(
-        '@error' => $auth_result,
-      )
-    );
-
-    drupal_set_message(
-      t('We were unable to remove your account details at this time.'),
-      'error');
-  }
-
-  return FALSE;
-}
-
 /**
  * Creates an expiration date 10 years in the future.
  *
diff --git a/modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.credit_card.inc b/modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.credit_card.inc
index 1798e91..4c4bfd9 100644
--- a/modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.credit_card.inc
+++ b/modules/commerce_iats_cardonfile/includes/commerce_iats_cardonfile.credit_card.inc
@@ -186,45 +186,6 @@ function commerce_iats_cardonfile_credit_card_charge($payment_method, $card_data
   return $response;
 }
 
-/**
- * Creates a new card on file record.
- */
-function commerce_iats_cardonfile_credit_card_create($form, $form_state, $payment_method, $card) {
-  // Get the API service.
-  $iats = commerce_iats_get_service('CustomerLink', $payment_method);
-
-  $request = array(
-    'customerIPAddress' => ip_address(),
-    'mop' => $card->card_type,
-    'creditCardNum' => $form_state['values']['credit_card']['number'],
-    'creditCardExpiry' => $expiry = sprintf('%02d/%02d', $card->card_exp_month, $card->card_exp_year % 100),
-    'cvv2' => $form_state['values']['credit_card']['code'],
-    'currency' => 'USD',
-    'recurring' => 0,
-    'beginDate' => commerce_iats_get_formatted_date(time()),
-    'endDate' => commerce_iats_get_formatted_date(time()),
-  );
-
-  // Create the credit card remote ID (customer code) with iATS.
-  $response = $iats->createCreditCardCustomerCode($request);
-
-  if ($response === FALSE || empty($response['CUSTOMERCODE'])) {
-    drupal_set_message(t('Failed at the payment processor with message: !message.', array(
-      '!message' => $response['AUTHORIZATIONRESULT']
-    )), 'error');
-  }
-  else {
-    // Save the card on file record with new remote ID.
-    $card->remote_id = trim($response['CUSTOMERCODE']);
-
-    if (commerce_cardonfile_save($card) === FALSE) {
-      drupal_set_message(t('Your card details could not be stored.'), 'error');
-    }
-  }
-
-  return $card;
-}
-
 /**
  * Processes a credit card charge and creates a card on file record.
  *
@@ -296,153 +257,3 @@ function commerce_iats_cardonfile_credit_card_create_and_charge($payment_method,
 
   return $response;
 }
-
-/**
- * Payment method callback: card update form.
- *
- * Updates credit card details stored with iATS Payments.
- */
-function commerce_iats_cardonfile_credit_card_update($form, &$form_state, $payment_method, $card_data) {
-  $card = array(
-    'number' => '',
-    'exp_month' => $card_data->card_exp_month,
-    'exp_year' => $card_data->card_exp_year,
-  );
-
-  $formatted_card_data = commerce_iats_format_credit_card_data($card);
-
-  $name_parts = explode(' ', $card_data->card_name);
-  $first_name = array_shift($name_parts);
-  $last_name = implode(' ', $name_parts);
-
-  // Create and populate the API request.
-  $request = array(
-    'customerIPAddress' => ip_address(),
-    'customerCode' => $card_data->remote_id,
-    'firstName' => $first_name,
-    'lastName' => $last_name,
-    'creditCardExpiry' => $formatted_card_data['expiry'],
-    'mop' => commerce_iats_credit_card_mop($card_data->card_type),
-    'updateCreditCardNum' => 0,
-    'comment' => COMMERCE_IATS_COMMENT_PREFIX,
-  );
-
-  if (isset($form_state['values']['credit_card']['recurring'])
-    && !empty($form_state['values']['credit_card']['recurring']['schedule_type'])) {
-    // Updating a recurring payment.
-    // Get default recurring payment duration.
-    $payment_duration = variable_get('commerce_iats_recurring_payment_duration',
-      COMMERCE_IATS_RECURRING_PAYMENT_DURATION);
-    $end_time = mktime(0, 0, 0, date('n'), date('j') + $payment_duration, date('y'));
-
-    $request['recurring'] = 1;
-    $request['beginDate'] = commerce_iats_get_formatted_date(time());
-    $request['endDate'] = commerce_iats_get_formatted_date($end_time);
-    $request['amount'] = $form_state['values']['credit_card']['recurring']['amount'];
-    $request['scheduleType'] = $form_state['values']['credit_card']['recurring']['schedule_type'];
-    $request['scheduleDate'] = $form_state['values']['credit_card']['recurring']['schedule_date'];
-  }
-  else {
-    // Not a recurring payment or cancelling an existing recurring payment.
-    $request['recurring'] = 0;
-    $request['beginDate'] = commerce_iats_get_formatted_date(time());
-    $request['endDate'] = commerce_iats_get_formatted_date(time());
-    $request['amount'] = 0;
-    $request['scheduleType'] = '';
-    $request['scheduleDate'] = '';
-  }
-
-  // Get the API service.
-  $iats = commerce_iats_get_service('CustomerLink', $payment_method);
-
-  // Log the request.
-  if ($payment_method['settings']['log']['request'] === 'request') {
-    commerce_iats_log_request($payment_method,
-      'commerce_iats_cardonfile_credit_card_update', $request);
-  }
-
-  // Process the credit card update.
-  $response = $iats->updateCreditCardCustomerCode($request);
-
-  $auth_result = (isset($response['AUTHORIZATIONRESULT'])) ?
-    trim($response['AUTHORIZATIONRESULT']) : NULL;
-
-  if ($auth_result == NULL) {
-    $auth_result = $response;
-  }
-
-  if (substr($auth_result, 0, 2) != COMMERCE_IATS_TXN_OK) {
-    watchdog('commerce_iats_cardonfile',
-      'iATS error when updating customer code: @error',
-      array(
-        '@error' => $auth_result,
-      )
-    );
-    return FALSE;
-  }
-
-  // Update the recurring payment record.
-  $card_on_file_recurring = commerce_iats_cardonfile_recurring_load($card_data->card_id);
-
-  if (!empty($card_on_file_recurring)) {
-    $card_on_file_recurring->amount = $request['amount'];
-    $card_on_file_recurring->schedule_type = $request['scheduleType'];
-    $card_on_file_recurring->schedule_date = $request['scheduleDate'];
-    commerce_iats_cardonfile_recurring_save($card_on_file_recurring);
-  }
-
-  return TRUE;
-}
-
-/**
- * Payment method callback: card delete form.
- *
- * Deletes customer code and associated credit card details
- * stored with iATS Payments.
- * Will not delete customer codes that have been used in a payment transaction.
- */
-function commerce_iats_cardonfile_credit_card_delete($form, &$form_state, $payment_method, $card_data) {
-  // Create and populate the API request.
-  $request = array(
-    'customerIPAddress' => ip_address(),
-    'customerCode' => $card_data->remote_id,
-    'comment' => COMMERCE_IATS_COMMENT_PREFIX,
-  );
-
-  // Get the API service.
-  $iats = commerce_iats_get_service('CustomerLink', $payment_method);
-
-  // Log the request.
-  if ($payment_method['settings']['log']['request'] === 'request') {
-    commerce_iats_log_request($payment_method,
-      'commerce_iats_cardonfile_credit_card_delete', $request);
-  }
-
-  // Process the credit card deletion.
-  $response = $iats->deleteCustomerCode($request);
-
-  $auth_result = (isset($response['AUTHORIZATIONRESULT'])) ?
-    trim($response['AUTHORIZATIONRESULT']) : NULL;
-
-  if ($auth_result == NULL) {
-    $auth_result = $response;
-  }
-
-  if ((substr($auth_result, 0, 2) == COMMERCE_IATS_TXN_OK) || strstr($auth_result, 'THE CUSTOMER CODE HAS BEEN USED')) {
-    return TRUE;
-  }
-  else {
-    watchdog('commerce_iats_cardonfile',
-      'iATS error when deleting customer code: @error',
-      array(
-        '@error' => $auth_result,
-      )
-    );
-
-    drupal_set_message(
-      t('We were unable to remove your card at this time.'),
-      'error');
-  }
-
-  return FALSE;
-}
